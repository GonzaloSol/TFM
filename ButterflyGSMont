library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

use IEEE.NUMERIC_STD.ALL;


entity GS_mont is
	 Generic(P : STD_LOGIC_VECTOR (22 downto 0):= "11111111110000000000001");

    Port ( I1 : in  STD_LOGIC_VECTOR (22 downto 0);
           I2 : in  STD_LOGIC_VECTOR (22 downto 0);
			  TW : in  STD_LOGIC_VECTOR (22 downto 0);
           O1 : out  STD_LOGIC_VECTOR (22 downto 0);
           O2 : out  STD_LOGIC_VECTOR (22 downto 0));
end GS_mont;

architecture Behavioral of GS_mont is
component Mont_instancias
Port (OA, OB: in STD_LOGIC_VECTOR(22 downto 0); RES: out STD_LOGIC_VECTOR(22 downto 0)); 
end component;

component reduc_barrett
Port (A: in STD_LOGIC_VECTOR(23 downto 0); B: out STD_LOGIC_VECTOR(22 downto 0)); 
end component;

component sumador_2
Port (in1, in2: in STD_LOGIC_VECTOR(22 downto 0); suma: out STD_LOGIC_VECTOR(23 downto 0)); 
end component;

component restador_2
Port (in1, in2: in STD_LOGIC_VECTOR(22 downto 0); resta: out STD_LOGIC_VECTOR(22 downto 0)); 
end component;

signal O11: STD_LOGIC_VECTOR(23 downto 0);
signal aux1: STD_LOGIC_VECTOR(22 downto 0);
signal aux2: STD_LOGIC_VECTOR(22 downto 0);
signal aux: STD_LOGIC_VECTOR(22 downto 0);
signal aux3: STD_LOGIC_VECTOR(22 downto 0);

begin
S1: component sumador_2 port map(I1,I2,O11);
RB: component reduc_barrett port map (O11,O1);
R1: component restador_2 port map (I1,I2,aux1);
R2: component restador_2 port map (I2,I1,aux2);
R3: component restador_2 port map (P,aux2,aux3);

process (I1,I2,aux1,aux3)
begin
if unsigned(I1) >= unsigned(I2) then
aux<=aux1;
else 
aux<=aux3;
end if;
end process;
M1 : component Mont_instancias port map(aux,TW,O2);


end Behavioral;
